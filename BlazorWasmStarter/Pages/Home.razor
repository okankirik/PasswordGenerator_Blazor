@page "/"
@using System.Text
@using BlazorWasmStarter.Enums
@inject NavigationManager Navigation
@inject IToastService ToastService

<PageTitle>Home</PageTitle>
@* @bind:event inputa yazdığımız girdiyi aynı anda ekrana yansıtmamızı sağlıyor. Hem yazıp hem okuyor *@

<div class="card">
    <div class="card-body">

   



<div class="input-group mb-3">
    <input @bind="password" readonly="readonly" type="text" class="form-control">
    <span @onmouseenter="@(() => onEmojiHover(iconType: "copy"))" @onmouseleave="@onEmojiMouseLeft" class="input-group-text my-clickable-button @onHoverCopyCss" id="basic-addon2">📄</span>
    <span @onclick="HandleGeneratePasswordClick" @onmouseenter="@(() => onEmojiHover(iconType: "generate"))" @onmouseleave="@onEmojiMouseLeft" class="input-group-text my-clickable-button @onHoverGenerateCss" id="basic-addon3">🔄</span>
    <span @onclick="HandleSavePasswordClick" @onmouseenter="@(() => onEmojiHover(iconType: "save"))" @onmouseleave="@onEmojiMouseLeft" class="input-group-text my-clickable-button @onHoverSaveCss" id="basic-addon4">💾</span>
</div>

<div class="mb-3">
    <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="inlineCheckbox1" @bind="@includeNumbers" @oninput="@((args) => HandleCheckboxOnChange(args, CheckBoxActionType.Numbers))">
        <label class="form-check-label" for="inlineCheckbox1">Numbers</label>
    </div>
    <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="inlineCheckbox2" @bind="@includeLowercase" @oninput="@((args) => HandleCheckboxOnChange(args, CheckBoxActionType.Lowercase))">
        <label class="form-check-label" for="inlineCheckbox2">Lowercase</label>
    </div>
    <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="inlineCheckbox3" @bind="@includeUppercase" @oninput="@((args) => HandleCheckboxOnChange(args, CheckBoxActionType.Uppercase))">
        <label class="form-check-label" for="inlineCheckbox3">Uppercase</label>
    </div>
            <div class="form-check form-check-inline">
                <input class="form-check-input" type="checkbox" id="inlineCheckbox4" @bind="@includeSpecialChars" @oninput="@((args) => HandleCheckboxOnChange(args, CheckBoxActionType.SpecialChars))" />
                <label class="form-check-label" for="inlineCheckbox4">Special Chars </label>
            </div>
    </div>

    <div class="container mt-4">
        <h5 class="mb-3">Password Length</h5>
        <div class="row align-items-center">
            <div class="col-md-2 mb-2 mb-md-0">
                <input @bind=@passwordLength type="number" class="form-control" min="6" max="50" @oninput="HandlePasswordLengthInputOnChange"/>
            </div>
            <div class="col-md-8 mb-2 mb-md-0">
                <input type="range" class="form-range" step="1" min="6" max="50" @bind="passwordLength" @oninput="HandleRangeOnChange" />
            </div>
            <div class="col-md-2">
                <span class="badge bg-primary fs-6">@passwordLength characters</span>
            </div>

        </div>

    </div>


    </div>
</div>

<div class="card mt-3">
    <div class="card-header">
        <MaterialSaveIcon Width="2" Height="2" ColourCode="#6A9C89" OnClick="@HandleSaveIconClick" /> Saved Passwords
    </div>
    <div class="card-body">
        <ul class="list-group">
            @foreach(var savedPassword in savedPasswords.Reverse())
            {
                <li class="list-group-item">@savedPassword</li>
            }
        </ul>
    </div>
</div>

@code{
    private string password = string.Empty;
    private int passwordLength = 12;
    private HashSet<string> savedPasswords = [];

    private string onHoverCopyCss = string.Empty;
    private string onHoverGenerateCss = string.Empty;
    private string onHoverSaveCss = string.Empty;

    private static Random random = new Random();
    private static StringBuilder stringBuilder = new StringBuilder();

    private bool includeLowercase = true;
    private bool includeUppercase = true;
    private bool includeNumbers = true;
    private bool includeSpecialChars = true;

    private const string lowercaseLetters = "abcdefghijklmnopqrstuvwxyz";
    private const string uppercaseLetters = "ABCDEFGHIJKLMNOPQRSTUVWXYZ";
    private const string numbers = "0123456789";
    private const string specialCharacters = "!@#$%&*()_+-={};:?";

    // Sayfa yüklenirken bir şeyler göstermek istediğimizde bu metodu kullanıyoruz.
    protected override void OnInitialized()
    {
        GeneratePassword();
        base.OnInitialized();
    }

    private void HandleSaveIconClick()
    {
        Navigation.NavigateTo(uri: "/counter");
    }

    private void HandlePasswordLengthInputOnChange(ChangeEventArgs args)
    {
        if (args.Value is null)
            return;

        passwordLength = Convert.ToInt32(args.Value);
        GeneratePassword();
    }

    private void HandleRangeOnChange(ChangeEventArgs args)
    {
        if (args.Value is null)
            return;

        passwordLength = Convert.ToInt32(args.Value);
        GeneratePassword();
    }


    private void HandleCheckboxOnChange(ChangeEventArgs args, CheckBoxActionType actionType)
    {
        if(args.Value is null)
            return;

        var result = actionType switch
        {
            CheckBoxActionType.SpecialChars => includeSpecialChars = (bool)args.Value,
            CheckBoxActionType.Numbers => includeNumbers = (bool)args.Value,
            CheckBoxActionType.Uppercase => includeUppercase = (bool)args.Value,
            CheckBoxActionType.Lowercase => includeLowercase = (bool)args.Value,
            CheckBoxActionType => throw new ArgumentException("Geçersiz CheckboxActionType", nameof(actionType))
        };

        GeneratePassword();
    }

    private void HandleSavePasswordClick()
    {
        if (string.IsNullOrEmpty(password) || savedPasswords.Any(x => x == password))
            return;

        savedPasswords.Add(password);

        ToastService.ShowInfo(message: "The selected password saved!");
    }

    // Append işlemi stringBuilder kısmında kayıtlı stringe Appendin içindeki işlemi dahil eder.(Bu örnek için random.Next(0,10) işlemini)
    private void HandleGeneratePasswordClick()
    {
        GeneratePassword();

    }

    private void GeneratePassword()
    {
        stringBuilder.Clear();

        var validChars = new StringBuilder();

        if (includeLowercase)
        {
            validChars.Append(lowercaseLetters);
        }

        if (includeUppercase)
        {
            validChars.Append(uppercaseLetters);
        }

        if (includeNumbers)
        {
            validChars.Append(numbers);
        }

        if (includeSpecialChars)
        {
            validChars.Append(specialCharacters);
        }

        if(!includeUppercase && !includeLowercase && !includeNumbers && !includeSpecialChars)
        {
            includeNumbers = true;
            validChars.Append(numbers);
        }


        for (int i = 0; i < passwordLength; i++)
        {
            var randomIndex = random.Next(0, validChars.Length);

            stringBuilder.Append(validChars[randomIndex]);


        }

        password = stringBuilder.ToString();
    }


    private void onEmojiHover(string iconType)
    {
        switch (iconType)
        {
            case "copy":
                onHoverCopyCss = "bg-secondary";
                break;

            case "generate":
                onHoverGenerateCss = "bg-secondary";
                break;
            case "save":
                onHoverSaveCss = "bg-secondary";
                break;

            default:
                break;
        }
    
    }

    private void onEmojiMouseLeft()
    {
            onHoverCopyCss = string.Empty;
            onHoverGenerateCss = string.Empty;
            onHoverSaveCss = string.Empty;
    }
    }

                <style>
                .form-range::-webkit-slider-thumb {
                    background: #0d6efd;
                }

                .form-range:-moz-range-thumb {
                     background: #0d6efd;
                }

                .form-range::-ms-thumb {
                background: #0d6efd;
                }
                </style>